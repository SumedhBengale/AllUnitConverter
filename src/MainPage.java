/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author ssben
 */

import javax.swing.JOptionPane;
public class MainPage extends javax.swing.JFrame {

    /**
     * Creates new form MainPage
     */
    public MainPage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton9 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        appTitle = new javax.swing.JLabel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        lengthPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        fromLength = new javax.swing.JComboBox<>();
        toLength = new javax.swing.JComboBox<>();
        convertLength = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        lengthInput = new javax.swing.JTextField();
        temperaturePanel = new javax.swing.JPanel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        fromTemp = new javax.swing.JComboBox<>();
        toTemp = new javax.swing.JComboBox<>();
        convertTemp = new javax.swing.JButton();
        jLabel40 = new javax.swing.JLabel();
        tempInput = new javax.swing.JTextField();
        areaPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        fromArea = new javax.swing.JComboBox<>();
        toArea = new javax.swing.JComboBox<>();
        convertArea = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        areaInput = new javax.swing.JTextField();
        weightPanel = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        fromWeight = new javax.swing.JComboBox<>();
        toWeight = new javax.swing.JComboBox<>();
        convertWeight = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        weightInput = new javax.swing.JTextField();
        speedPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        fromSpeed = new javax.swing.JComboBox<>();
        toSpeed = new javax.swing.JComboBox<>();
        convertSpeed = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        speedInput = new javax.swing.JTextField();
        volumePanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        fromVolume = new javax.swing.JComboBox<>();
        toVolume = new javax.swing.JComboBox<>();
        convertVolume = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        volumeInput = new javax.swing.JTextField();
        forcePanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        fromForce = new javax.swing.JComboBox<>();
        toForce = new javax.swing.JComboBox<>();
        convertForce = new javax.swing.JButton();
        jLabel43 = new javax.swing.JLabel();
        forceInput = new javax.swing.JTextField();
        densityPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        fromStorage = new javax.swing.JComboBox<>();
        toStorage = new javax.swing.JComboBox<>();
        convertStorage = new javax.swing.JButton();
        jLabel28 = new javax.swing.JLabel();
        storageInput = new javax.swing.JTextField();
        energyPanel = new javax.swing.JPanel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        fromPressure = new javax.swing.JComboBox<>();
        toPressure = new javax.swing.JComboBox<>();
        convertPressure = new javax.swing.JButton();
        jLabel47 = new javax.swing.JLabel();
        pressureInput = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("All Unit Converter");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jButton9.setText("Pressure");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton1.setText("Length");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Area");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("Weight");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Temperature");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Speed");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Force");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Digital Storage");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton3.setText("Volume");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        appTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        appTitle.setText("All Units");

        jLayeredPane1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lengthPanel.setVisible(true);
        areaPanel.setVisible(false);
        volumePanel.setVisible(false);
        weightPanel.setVisible(false);
        speedPanel.setVisible(false);
        forcePanel.setVisible(false);
        temperaturePanel.setVisible(false);
        densityPanel.setVisible(false);
        energyPanel.setVisible(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Length Converter");

        jLabel10.setText("Convert From");

        jLabel11.setText("Convert To");

        fromLength.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Meters", "Centimeters", "Millimeters", "Feet", "Inches", "Yards" }));
        fromLength.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromLengthActionPerformed(evt);
            }
        });

        toLength.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Meters", "Centimeters", "Millimeters", "Feet", "Inches", "Yards" }));

        convertLength.setText("Convert");
        convertLength.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertLengthActionPerformed(evt);
            }
        });

        jLabel12.setText("Enter the Length");

        javax.swing.GroupLayout lengthPanelLayout = new javax.swing.GroupLayout(lengthPanel);
        lengthPanel.setLayout(lengthPanelLayout);
        lengthPanelLayout.setHorizontalGroup(
            lengthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lengthPanelLayout.createSequentialGroup()
                .addGroup(lengthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(lengthPanelLayout.createSequentialGroup()
                        .addGap(194, 194, 194)
                        .addComponent(jLabel1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lengthPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(convertLength, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(lengthPanelLayout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addGroup(lengthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(lengthPanelLayout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(112, 112, 112)
                                .addComponent(toLength, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lengthPanelLayout.createSequentialGroup()
                                .addGroup(lengthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel12))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(lengthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(fromLength, 0, 150, Short.MAX_VALUE)
                                    .addComponent(lengthInput))))))
                .addContainerGap(125, Short.MAX_VALUE))
        );
        lengthPanelLayout.setVerticalGroup(
            lengthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lengthPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(30, 30, 30)
                .addGroup(lengthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(lengthInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(lengthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(fromLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(lengthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addComponent(convertLength, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel37.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel37.setText("Temperature Converter");

        jLabel38.setText("Convert From");

        jLabel39.setText("Convert To");

        fromTemp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Celsius", "Fahrenheit", "Kelvin" }));
        fromTemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromTempActionPerformed(evt);
            }
        });

        toTemp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Celsius", "Fahrenheit", "Kelvin" }));

        convertTemp.setText("Convert");
        convertTemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertTempActionPerformed(evt);
            }
        });

        jLabel40.setText("Enter the Temperature");

        javax.swing.GroupLayout temperaturePanelLayout = new javax.swing.GroupLayout(temperaturePanel);
        temperaturePanel.setLayout(temperaturePanelLayout);
        temperaturePanelLayout.setHorizontalGroup(
            temperaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(temperaturePanelLayout.createSequentialGroup()
                .addGroup(temperaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(temperaturePanelLayout.createSequentialGroup()
                        .addGap(194, 194, 194)
                        .addComponent(jLabel37))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, temperaturePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(convertTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(temperaturePanelLayout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addGroup(temperaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(temperaturePanelLayout.createSequentialGroup()
                                .addComponent(jLabel39)
                                .addGap(112, 112, 112)
                                .addComponent(toTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, temperaturePanelLayout.createSequentialGroup()
                                .addGroup(temperaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel38)
                                    .addComponent(jLabel40))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(temperaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(fromTemp, 0, 150, Short.MAX_VALUE)
                                    .addComponent(tempInput))))))
                .addContainerGap(125, Short.MAX_VALUE))
        );
        temperaturePanelLayout.setVerticalGroup(
            temperaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(temperaturePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel37)
                .addGap(30, 30, 30)
                .addGroup(temperaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel40)
                    .addComponent(tempInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(temperaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel38)
                    .addComponent(fromTemp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(temperaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toTemp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel39))
                .addGap(18, 18, 18)
                .addComponent(convertTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Area Converter");

        jLabel13.setText("Convert From");

        jLabel18.setText("Convert To");

        fromArea.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Square Meters", "Square Centimeters", "Square Millimeters", "Square Feet", "Square Inches", "Square Yards" }));
        fromArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromAreaActionPerformed(evt);
            }
        });

        toArea.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Square Meters", "Square Centimeters", "Square Millimeters", "Square Feet", "Square Inches", "Square Yards" }));

        convertArea.setText("Convert");
        convertArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertAreaActionPerformed(evt);
            }
        });

        jLabel19.setText("Enter the Area");

        javax.swing.GroupLayout areaPanelLayout = new javax.swing.GroupLayout(areaPanel);
        areaPanel.setLayout(areaPanelLayout);
        areaPanelLayout.setHorizontalGroup(
            areaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(areaPanelLayout.createSequentialGroup()
                .addGroup(areaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(areaPanelLayout.createSequentialGroup()
                        .addGap(194, 194, 194)
                        .addComponent(jLabel2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, areaPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(convertArea, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(areaPanelLayout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addGroup(areaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(areaPanelLayout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addGap(112, 112, 112)
                                .addComponent(toArea, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, areaPanelLayout.createSequentialGroup()
                                .addGroup(areaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel19))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(areaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(fromArea, 0, 150, Short.MAX_VALUE)
                                    .addComponent(areaInput))))))
                .addContainerGap(135, Short.MAX_VALUE))
        );
        areaPanelLayout.setVerticalGroup(
            areaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(areaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(30, 30, 30)
                .addGroup(areaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(areaInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(areaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(fromArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(areaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addGap(18, 18, 18)
                .addComponent(convertArea, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel14.setText("Weight Converter");

        jLabel15.setText("Convert From");

        jLabel16.setText("Convert To");

        fromWeight.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Kilograms", "Grams", "Pounds", "Ounces" }));
        fromWeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromWeightActionPerformed(evt);
            }
        });

        toWeight.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Kilograms", "Grams", "Pounds", "Ounces" }));

        convertWeight.setText("Convert");
        convertWeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertWeightActionPerformed(evt);
            }
        });

        jLabel17.setText("Enter the Weight");

        javax.swing.GroupLayout weightPanelLayout = new javax.swing.GroupLayout(weightPanel);
        weightPanel.setLayout(weightPanelLayout);
        weightPanelLayout.setHorizontalGroup(
            weightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(weightPanelLayout.createSequentialGroup()
                .addGroup(weightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(weightPanelLayout.createSequentialGroup()
                        .addGap(194, 194, 194)
                        .addComponent(jLabel14))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, weightPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(convertWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(weightPanelLayout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addGroup(weightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(weightPanelLayout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addGap(112, 112, 112)
                                .addComponent(toWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, weightPanelLayout.createSequentialGroup()
                                .addGroup(weightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15)
                                    .addComponent(jLabel17))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(weightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(fromWeight, 0, 150, Short.MAX_VALUE)
                                    .addComponent(weightInput))))))
                .addContainerGap(135, Short.MAX_VALUE))
        );
        weightPanelLayout.setVerticalGroup(
            weightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(weightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14)
                .addGap(30, 30, 30)
                .addGroup(weightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(weightInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(weightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(fromWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(weightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addGap(18, 18, 18)
                .addComponent(convertWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Speed Converter");

        jLabel20.setText("Convert From");

        jLabel21.setText("Convert To");

        fromSpeed.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Kilometers per Hour", "Miles per Hour", "Meters per Second", "Feet per Second", "Knots" }));
        fromSpeed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromSpeedActionPerformed(evt);
            }
        });

        toSpeed.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Kilometers per Hour", "Miles per Hour", "Meters per Second", "Feet per Second", "Knots" }));

        convertSpeed.setText("Convert");
        convertSpeed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertSpeedActionPerformed(evt);
            }
        });

        jLabel22.setText("Enter the Speed");

        javax.swing.GroupLayout speedPanelLayout = new javax.swing.GroupLayout(speedPanel);
        speedPanel.setLayout(speedPanelLayout);
        speedPanelLayout.setHorizontalGroup(
            speedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(speedPanelLayout.createSequentialGroup()
                .addGroup(speedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(speedPanelLayout.createSequentialGroup()
                        .addGap(194, 194, 194)
                        .addComponent(jLabel3))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, speedPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(convertSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(speedPanelLayout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addGroup(speedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(speedPanelLayout.createSequentialGroup()
                                .addComponent(jLabel21)
                                .addGap(112, 112, 112)
                                .addComponent(toSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, speedPanelLayout.createSequentialGroup()
                                .addGroup(speedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel20)
                                    .addComponent(jLabel22))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(speedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(fromSpeed, 0, 150, Short.MAX_VALUE)
                                    .addComponent(speedInput))))))
                .addContainerGap(135, Short.MAX_VALUE))
        );
        speedPanelLayout.setVerticalGroup(
            speedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(speedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(30, 30, 30)
                .addGroup(speedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(speedInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(speedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(fromSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(speedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addGap(18, 18, 18)
                .addComponent(convertSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Volume Converter");

        jLabel23.setText("Convert From");

        jLabel24.setText("Convert To");

        fromVolume.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Litres", "Gallons", "Cubic Meters", "Cubic Feet" }));
        fromVolume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromVolumeActionPerformed(evt);
            }
        });

        toVolume.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Litres", "Gallons", "Cubic Meters", "Cubic Feet" }));

        convertVolume.setText("Convert");
        convertVolume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertVolumeActionPerformed(evt);
            }
        });

        jLabel25.setText("Enter the Volume");

        javax.swing.GroupLayout volumePanelLayout = new javax.swing.GroupLayout(volumePanel);
        volumePanel.setLayout(volumePanelLayout);
        volumePanelLayout.setHorizontalGroup(
            volumePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(volumePanelLayout.createSequentialGroup()
                .addGroup(volumePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(volumePanelLayout.createSequentialGroup()
                        .addGap(194, 194, 194)
                        .addComponent(jLabel5))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, volumePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(convertVolume, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(volumePanelLayout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addGroup(volumePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(volumePanelLayout.createSequentialGroup()
                                .addComponent(jLabel24)
                                .addGap(112, 112, 112)
                                .addComponent(toVolume, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, volumePanelLayout.createSequentialGroup()
                                .addGroup(volumePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel23)
                                    .addComponent(jLabel25))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(volumePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(fromVolume, 0, 150, Short.MAX_VALUE)
                                    .addComponent(volumeInput))))))
                .addContainerGap(145, Short.MAX_VALUE))
        );
        volumePanelLayout.setVerticalGroup(
            volumePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(volumePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(30, 30, 30)
                .addGroup(volumePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(volumeInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(volumePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(fromVolume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(volumePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toVolume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24))
                .addGap(18, 18, 18)
                .addComponent(convertVolume, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("Force Converter");

        jLabel41.setText("Convert From");

        jLabel42.setText("Convert To");

        fromForce.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "dyne", "Newton" }));
        fromForce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromForceActionPerformed(evt);
            }
        });

        toForce.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "dyne", "Newton" }));

        convertForce.setText("Convert");
        convertForce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertForceActionPerformed(evt);
            }
        });

        jLabel43.setText("Enter the Force");

        javax.swing.GroupLayout forcePanelLayout = new javax.swing.GroupLayout(forcePanel);
        forcePanel.setLayout(forcePanelLayout);
        forcePanelLayout.setHorizontalGroup(
            forcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(forcePanelLayout.createSequentialGroup()
                .addGroup(forcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(forcePanelLayout.createSequentialGroup()
                        .addGap(194, 194, 194)
                        .addComponent(jLabel6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, forcePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(convertForce, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(forcePanelLayout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addGroup(forcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(forcePanelLayout.createSequentialGroup()
                                .addComponent(jLabel42)
                                .addGap(112, 112, 112)
                                .addComponent(toForce, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, forcePanelLayout.createSequentialGroup()
                                .addGroup(forcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel41)
                                    .addComponent(jLabel43))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(forcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(fromForce, 0, 150, Short.MAX_VALUE)
                                    .addComponent(forceInput))))))
                .addContainerGap(125, Short.MAX_VALUE))
        );
        forcePanelLayout.setVerticalGroup(
            forcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(forcePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(30, 30, 30)
                .addGroup(forcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel43)
                    .addComponent(forceInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(forcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel41)
                    .addComponent(fromForce, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(forcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toForce, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel42))
                .addGap(18, 18, 18)
                .addComponent(convertForce, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Digital Storage Converter");

        jLabel26.setText("Convert From");

        jLabel27.setText("Convert To");

        fromStorage.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bit", "Byte" }));
        fromStorage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromStorageActionPerformed(evt);
            }
        });

        toStorage.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bit", "Byte", " " }));

        convertStorage.setText("Convert");
        convertStorage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertStorageActionPerformed(evt);
            }
        });

        jLabel28.setText("Enter the storage");

        javax.swing.GroupLayout densityPanelLayout = new javax.swing.GroupLayout(densityPanel);
        densityPanel.setLayout(densityPanelLayout);
        densityPanelLayout.setHorizontalGroup(
            densityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(densityPanelLayout.createSequentialGroup()
                .addGroup(densityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(densityPanelLayout.createSequentialGroup()
                        .addGap(194, 194, 194)
                        .addComponent(jLabel4))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, densityPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(convertStorage, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(densityPanelLayout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addGroup(densityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(densityPanelLayout.createSequentialGroup()
                                .addComponent(jLabel27)
                                .addGap(112, 112, 112)
                                .addComponent(toStorage, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, densityPanelLayout.createSequentialGroup()
                                .addGroup(densityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel26)
                                    .addComponent(jLabel28))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(densityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(fromStorage, 0, 150, Short.MAX_VALUE)
                                    .addComponent(storageInput))))))
                .addContainerGap(125, Short.MAX_VALUE))
        );
        densityPanelLayout.setVerticalGroup(
            densityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(densityPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(30, 30, 30)
                .addGroup(densityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(storageInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(densityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(fromStorage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(densityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toStorage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27))
                .addGap(18, 18, 18)
                .addComponent(convertStorage, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel44.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel44.setText("Pressure Converter");

        jLabel45.setText("Convert From");

        jLabel46.setText("Convert To");

        fromPressure.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bar", "Pascal", "Torr" }));
        fromPressure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromPressureActionPerformed(evt);
            }
        });

        toPressure.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bar", "Pascal", "Torr" }));

        convertPressure.setText("Convert");
        convertPressure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertPressureActionPerformed(evt);
            }
        });

        jLabel47.setText("Enter the pressure");

        javax.swing.GroupLayout energyPanelLayout = new javax.swing.GroupLayout(energyPanel);
        energyPanel.setLayout(energyPanelLayout);
        energyPanelLayout.setHorizontalGroup(
            energyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(energyPanelLayout.createSequentialGroup()
                .addGroup(energyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(energyPanelLayout.createSequentialGroup()
                        .addGap(194, 194, 194)
                        .addComponent(jLabel44))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, energyPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(convertPressure, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(energyPanelLayout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addGroup(energyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(energyPanelLayout.createSequentialGroup()
                                .addComponent(jLabel46)
                                .addGap(112, 112, 112)
                                .addComponent(toPressure, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, energyPanelLayout.createSequentialGroup()
                                .addGroup(energyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel45)
                                    .addComponent(jLabel47))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(energyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(fromPressure, 0, 150, Short.MAX_VALUE)
                                    .addComponent(pressureInput))))))
                .addContainerGap(121, Short.MAX_VALUE))
        );
        energyPanelLayout.setVerticalGroup(
            energyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(energyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel44)
                .addGap(30, 30, 30)
                .addGroup(energyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel47)
                    .addComponent(pressureInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(energyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel45)
                    .addComponent(fromPressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(energyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toPressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel46))
                .addGap(18, 18, 18)
                .addComponent(convertPressure, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLayeredPane1.setLayer(lengthPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(temperaturePanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(areaPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(weightPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(speedPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(volumePanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(forcePanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(densityPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(energyPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 567, Short.MAX_VALUE)
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(lengthPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(areaPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(weightPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(speedPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(volumePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(temperaturePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(forcePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(16, 16, 16)))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(densityPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addComponent(energyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 396, Short.MAX_VALUE)
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(lengthPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(areaPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(weightPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(speedPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(volumePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(temperaturePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(forcePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(157, 157, 157)))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addComponent(densityPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addGap(21, 21, 21)
                    .addComponent(energyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(1, 1, 1)))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(246, 246, 246)
                                .addComponent(appTitle))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton5))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLayeredPane1)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(appTitle)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton6))
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7)
                    .addComponent(jButton5)
                    .addComponent(jButton8)
                    .addComponent(jButton9))
                .addGap(18, 18, 18)
                .addComponent(jLayeredPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        lengthPanel.setVisible(true);
        areaPanel.setVisible(false);
        volumePanel.setVisible(false);
        weightPanel.setVisible(false);
        speedPanel.setVisible(false);
        forcePanel.setVisible(false);
        temperaturePanel.setVisible(false);
        densityPanel.setVisible(false);
        energyPanel.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        lengthPanel.setVisible(false);
        areaPanel.setVisible(true);
        volumePanel.setVisible(false);
        weightPanel.setVisible(false);
        speedPanel.setVisible(false);
        forcePanel.setVisible(false);
        temperaturePanel.setVisible(false);
        densityPanel.setVisible(false);
        energyPanel.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        lengthPanel.setVisible(false);
        areaPanel.setVisible(false);
        volumePanel.setVisible(true);
        weightPanel.setVisible(false);
        speedPanel.setVisible(false);
        forcePanel.setVisible(false);
        temperaturePanel.setVisible(false);
        densityPanel.setVisible(false);
        energyPanel.setVisible(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        lengthPanel.setVisible(false);
        areaPanel.setVisible(false);
        volumePanel.setVisible(false);
        weightPanel.setVisible(true);
        speedPanel.setVisible(false);
        forcePanel.setVisible(false);
        temperaturePanel.setVisible(false);
        densityPanel.setVisible(false);
        energyPanel.setVisible(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        lengthPanel.setVisible(false);
        areaPanel.setVisible(false);
        volumePanel.setVisible(false);
        weightPanel.setVisible(false);
        speedPanel.setVisible(true);
        forcePanel.setVisible(false);
        temperaturePanel.setVisible(false);
        densityPanel.setVisible(false);
        energyPanel.setVisible(false);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        lengthPanel.setVisible(false);
        areaPanel.setVisible(false);
        volumePanel.setVisible(false);
        weightPanel.setVisible(false);
        speedPanel.setVisible(false);
        forcePanel.setVisible(true);
        temperaturePanel.setVisible(false);
        densityPanel.setVisible(false);
        energyPanel.setVisible(false);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        lengthPanel.setVisible(false);
        areaPanel.setVisible(false);
        volumePanel.setVisible(false);
        weightPanel.setVisible(false);
        speedPanel.setVisible(false);
        forcePanel.setVisible(false);
        temperaturePanel.setVisible(true);
        densityPanel.setVisible(false);
        energyPanel.setVisible(false);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        lengthPanel.setVisible(false);
        areaPanel.setVisible(false);
        volumePanel.setVisible(false);
        weightPanel.setVisible(false);
        speedPanel.setVisible(false);
        forcePanel.setVisible(false);
        temperaturePanel.setVisible(false);
        densityPanel.setVisible(false);
        energyPanel.setVisible(true);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void fromLengthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromLengthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fromLengthActionPerformed

    private void convertLengthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertLengthActionPerformed
        try{
            //Converting Meters
            Double convertedLength;
            Double inputLength=Double.parseDouble(lengthInput.getText());
            if(fromLength.getSelectedItem().toString()=="Meters" && toLength.getSelectedItem().toString()=="Feet"){
            convertedLength=inputLength*3.28084;
            JOptionPane.showMessageDialog(this, "The Length in Feet is "+convertedLength.toString());
        }
            else if(fromLength.getSelectedItem().toString()=="Meters" && toLength.getSelectedItem().toString()=="Inches"){
            convertedLength=inputLength*39.37;
            JOptionPane.showMessageDialog(this, "The Length in Inches is "+convertedLength.toString());
        }
            else if(fromLength.getSelectedItem().toString()=="Meters" && toLength.getSelectedItem().toString()=="Centimeters"){
            convertedLength=inputLength*100;
            JOptionPane.showMessageDialog(this, "The Length in Centimeters is "+convertedLength.toString());
        }
            else if(fromLength.getSelectedItem().toString()=="Meters" && toLength.getSelectedItem().toString()=="Millimeters"){
            convertedLength=inputLength*1000;
            JOptionPane.showMessageDialog(this, "The Length in Millimeters is "+convertedLength.toString());
        }
            else if(fromLength.getSelectedItem().toString()=="Meters" && toLength.getSelectedItem().toString()=="Yards"){
            convertedLength=inputLength*1.094;
            JOptionPane.showMessageDialog(this, "The Length in Yards is "+convertedLength.toString());
        }
            
            //Converting Feet
            else if(fromLength.getSelectedItem().toString()=="Feet" && toLength.getSelectedItem().toString()=="Meters"){
            convertedLength=inputLength/3.28084;
            JOptionPane.showMessageDialog(this, "The Length in Meters is "+convertedLength.toString());
        }
            else if(fromLength.getSelectedItem().toString()=="Feet" && toLength.getSelectedItem().toString()=="Inches"){
            convertedLength=inputLength*12;
            JOptionPane.showMessageDialog(this, "The Length in Inches is "+convertedLength.toString());
        }
            else if(fromLength.getSelectedItem().toString()=="Feet" && toLength.getSelectedItem().toString()=="Centimeters"){
            convertedLength=inputLength*30.48;
            JOptionPane.showMessageDialog(this, "The Length in Centimeters is "+convertedLength.toString());
        }
            else if(fromLength.getSelectedItem().toString()=="Feet" && toLength.getSelectedItem().toString()=="Millimeters"){
            convertedLength=inputLength*305;
            JOptionPane.showMessageDialog(this, "The Length in Millimeters is "+convertedLength.toString());
        }
            else if(fromLength.getSelectedItem().toString()=="Feet" && toLength.getSelectedItem().toString()=="Yards"){
            convertedLength=inputLength/3;
            JOptionPane.showMessageDialog(this, "The Length in Yards is "+convertedLength.toString());
        }
            
            
            //Converting Inches
            else if(fromLength.getSelectedItem().toString()=="Inches" && toLength.getSelectedItem().toString()=="Meters"){
            convertedLength=inputLength/39.37;
            JOptionPane.showMessageDialog(this, "The Length in Meters is "+convertedLength.toString());
        }
            else if(fromLength.getSelectedItem().toString()=="Inches" && toLength.getSelectedItem().toString()=="Feet"){
            convertedLength=inputLength/12;
            JOptionPane.showMessageDialog(this, "The Length in Feet is "+convertedLength.toString());
        }
            else if(fromLength.getSelectedItem().toString()=="Inches" && toLength.getSelectedItem().toString()=="Centimeters"){
            convertedLength=inputLength*2.54;
            JOptionPane.showMessageDialog(this, "The Length in Centimeters is "+convertedLength.toString());
        }
            else if(fromLength.getSelectedItem().toString()=="Inches" && toLength.getSelectedItem().toString()=="Millimeters"){
            convertedLength=inputLength*25.4;
            JOptionPane.showMessageDialog(this, "The Length in Millimeters is "+convertedLength.toString());
        }
            else if(fromLength.getSelectedItem().toString()=="Inches" && toLength.getSelectedItem().toString()=="Yards"){
            convertedLength=inputLength/36;
            JOptionPane.showMessageDialog(this, "The Length in Yards is "+convertedLength.toString());
        }
            
            
            //Converting Centimeters
            else if(fromLength.getSelectedItem().toString()=="Centimeters" && toLength.getSelectedItem().toString()=="Meters"){
            convertedLength=inputLength/100;
            JOptionPane.showMessageDialog(this, "The Length in Meters is "+convertedLength.toString());
        }
            else if(fromLength.getSelectedItem().toString()=="Centimeters" && toLength.getSelectedItem().toString()=="Feet"){
            convertedLength=inputLength/30.48;
            JOptionPane.showMessageDialog(this, "The Length in Feet is "+convertedLength.toString());
        }
            else if(fromLength.getSelectedItem().toString()=="Centimeters" && toLength.getSelectedItem().toString()=="Inches"){
            convertedLength=inputLength/2.54;
            JOptionPane.showMessageDialog(this, "The Length in Inches is "+convertedLength.toString());
        }
            else if(fromLength.getSelectedItem().toString()=="Centimeters" && toLength.getSelectedItem().toString()=="Millimeters"){
            convertedLength=inputLength*10;
            JOptionPane.showMessageDialog(this, "The Length in Millimeters is "+convertedLength.toString());
        }
            else if(fromLength.getSelectedItem().toString()=="Centimeters" && toLength.getSelectedItem().toString()=="Yards"){
            convertedLength=inputLength/91.44;
            JOptionPane.showMessageDialog(this, "The Length in Yards is "+convertedLength.toString());
        }
            
            
            //Converting Millimeters
            else if(fromLength.getSelectedItem().toString()=="Millimeters" && toLength.getSelectedItem().toString()=="Meters"){
            convertedLength=inputLength/1000;
            JOptionPane.showMessageDialog(this, "The Length in Meters is "+convertedLength.toString());
        }
            else if(fromLength.getSelectedItem().toString()=="Millimeters" && toLength.getSelectedItem().toString()=="Centimeters"){
            convertedLength=inputLength*100;
            JOptionPane.showMessageDialog(this, "The Length in Centimeters is "+convertedLength.toString());
        }
            else if(fromLength.getSelectedItem().toString()=="Millimeters" && toLength.getSelectedItem().toString()=="Inches"){
            convertedLength=inputLength/25.4;
            JOptionPane.showMessageDialog(this, "The Length in Inches is "+convertedLength.toString());
        }
            else if(fromLength.getSelectedItem().toString()=="Millimeters" && toLength.getSelectedItem().toString()=="Feet"){
            convertedLength=inputLength/305;
            JOptionPane.showMessageDialog(this, "The Length in Feet is "+convertedLength.toString());
        }
            else if(fromLength.getSelectedItem().toString()=="Millimeters" && toLength.getSelectedItem().toString()=="Yards"){
            convertedLength=inputLength/914;
            JOptionPane.showMessageDialog(this, "The Length in Yards is "+convertedLength.toString());
        }
            
            //Converting Yards
            else if(fromLength.getSelectedItem().toString()=="Yards" && toLength.getSelectedItem().toString()=="Meters"){
            convertedLength=inputLength/1.094;
            JOptionPane.showMessageDialog(this, "The Length in Meters is "+convertedLength.toString());
        }
            else if(fromLength.getSelectedItem().toString()=="Yards" && toLength.getSelectedItem().toString()=="Centimeters"){
            convertedLength=inputLength*91.44;
            JOptionPane.showMessageDialog(this, "The Length in Centimeters is "+convertedLength.toString());
        }
            else if(fromLength.getSelectedItem().toString()=="Yards" && toLength.getSelectedItem().toString()=="Inches"){
            convertedLength=inputLength*36;
            JOptionPane.showMessageDialog(this, "The Length in Inches is "+convertedLength.toString());
        }
            else if(fromLength.getSelectedItem().toString()=="Yards" && toLength.getSelectedItem().toString()=="Feet"){
            convertedLength=inputLength*3;
            JOptionPane.showMessageDialog(this, "The Length in Feet is "+convertedLength.toString());
        }
            else if(fromLength.getSelectedItem().toString()=="Yards" && toLength.getSelectedItem().toString()=="Millimeters"){
            convertedLength=inputLength*914;
            JOptionPane.showMessageDialog(this, "The Length in Millimeters is "+convertedLength.toString());
        }
            
            
            else if(fromLength.getSelectedItem().toString()==toLength.getSelectedItem().toString()){
            JOptionPane.showMessageDialog(this, "Same units selected");
        }
    }
    catch(java.lang.NumberFormatException e){JOptionPane.showMessageDialog(this,"Only Numerical Input is Allowed");}
    }//GEN-LAST:event_convertLengthActionPerformed

    private void fromAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromAreaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fromAreaActionPerformed

    private void convertAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertAreaActionPerformed
        try{
            //Converting Square Meters
            Double convertedArea;
            Double inputLength=Double.parseDouble(areaInput.getText());
            if(fromArea.getSelectedItem().toString()=="Square Meters" && toArea.getSelectedItem().toString()=="Square Feet"){
            convertedArea=inputLength*10.764;
            JOptionPane.showMessageDialog(this, "The Length in Square Feet is "+convertedArea.toString());
        }
            else if(fromArea.getSelectedItem().toString()=="Square Meters" && toArea.getSelectedItem().toString()=="Square Inches"){
            convertedArea=inputLength*1550;
            JOptionPane.showMessageDialog(this, "The Length in Square Inches is "+convertedArea.toString());
        }
            else if(fromArea.getSelectedItem().toString()=="Square Meters" && toArea.getSelectedItem().toString()=="Square Centimeters"){
            convertedArea=inputLength*10000;
            JOptionPane.showMessageDialog(this, "The Length in Square Centimeters is "+convertedArea.toString());
        }
            else if(fromArea.getSelectedItem().toString()=="Square Meters" && toArea.getSelectedItem().toString()=="Square Millimeters"){
            convertedArea=inputLength*1000000;
            JOptionPane.showMessageDialog(this, "The Length in Square Millimeters is "+convertedArea.toString());
        }
            else if(fromArea.getSelectedItem().toString()=="Square Meters" && toArea.getSelectedItem().toString()=="Square Yards"){
            convertedArea=inputLength*1.196;
            JOptionPane.showMessageDialog(this, "The Length in Square Yards is "+convertedArea.toString());
        }
            
            //Converting Square Feet
            else if(fromArea.getSelectedItem().toString()=="Square Feet" && toArea.getSelectedItem().toString()=="Square Meters"){
            convertedArea=inputLength/10.764;
            JOptionPane.showMessageDialog(this, "The Length in Square Meters is "+convertedArea.toString());
        }
            else if(fromArea.getSelectedItem().toString()=="Square Feet" && toArea.getSelectedItem().toString()=="Square Inches"){
            convertedArea=inputLength*144;
            JOptionPane.showMessageDialog(this, "The Length in Square Inches is "+convertedArea.toString());
        }
            else if(fromArea.getSelectedItem().toString()=="Square Feet" && toArea.getSelectedItem().toString()=="Square Centimeters"){
            convertedArea=inputLength*929;
            JOptionPane.showMessageDialog(this, "The Length in Square Centimeters is "+convertedArea.toString());
        }
            else if(fromArea.getSelectedItem().toString()=="Square Feet" && toArea.getSelectedItem().toString()=="Square Millimeters"){
            convertedArea=inputLength*92903;
            JOptionPane.showMessageDialog(this, "The Length in Square Millimeters is "+convertedArea.toString());
        }
            else if(fromArea.getSelectedItem().toString()=="Square Feet" && toArea.getSelectedItem().toString()=="Square Yards"){
            convertedArea=inputLength/9;
            JOptionPane.showMessageDialog(this, "The Length in Square Yards is "+convertedArea.toString());
        }
            
            
            //Converting Square Inches
            else if(fromArea.getSelectedItem().toString()=="Square Inches" && toArea.getSelectedItem().toString()=="Square Meters"){
            convertedArea=inputLength/1550;
            JOptionPane.showMessageDialog(this, "The Length in Square Meters is "+convertedArea.toString());
        }
            else if(fromArea.getSelectedItem().toString()=="Square Inches" && toArea.getSelectedItem().toString()=="Square Feet"){
            convertedArea=inputLength/144;
            JOptionPane.showMessageDialog(this, "The Length in Square Feet is "+convertedArea.toString());
        }
            else if(fromArea.getSelectedItem().toString()=="Square Inches" && toArea.getSelectedItem().toString()=="Square Centimeters"){
            convertedArea=inputLength*6.452;
            JOptionPane.showMessageDialog(this, "The Length in Square Centimeters is "+convertedArea.toString());
        }
            else if(fromArea.getSelectedItem().toString()=="Square Inches" && toArea.getSelectedItem().toString()=="Square Millimeters"){
            convertedArea=inputLength*645;
            JOptionPane.showMessageDialog(this, "The Length in Square Millimeters is "+convertedArea.toString());
        }
            else if(fromArea.getSelectedItem().toString()=="Square Inches" && toArea.getSelectedItem().toString()=="Square Yards"){
            convertedArea=inputLength/1296;
            JOptionPane.showMessageDialog(this, "The Length in Square Yards is "+convertedArea.toString());
        }
            
            
            //Converting Square Centimeters
            else if(fromArea.getSelectedItem().toString()=="Square Centimeters" && toArea.getSelectedItem().toString()=="Square Meters"){
            convertedArea=inputLength/10000;
            JOptionPane.showMessageDialog(this, "The Length in Square Meters is "+convertedArea.toString());
        }
            else if(fromArea.getSelectedItem().toString()=="Square Centimeters" && toArea.getSelectedItem().toString()=="Square Feet"){
            convertedArea=inputLength/929;
            JOptionPane.showMessageDialog(this, "The Length in Square Feet is "+convertedArea.toString());
        }
            else if(fromArea.getSelectedItem().toString()=="Square Centimeters" && toArea.getSelectedItem().toString()=="Square Inches"){
            convertedArea=inputLength/6.452;
            JOptionPane.showMessageDialog(this, "The Length in Square Inches is "+convertedArea.toString());
        }
            else if(fromArea.getSelectedItem().toString()=="Square Centimeters" && toArea.getSelectedItem().toString()=="Square Millimeters"){
            convertedArea=inputLength*100;
            JOptionPane.showMessageDialog(this, "The Length in Square Millimeters is "+convertedArea.toString());
        }
            else if(fromArea.getSelectedItem().toString()=="Square Centimeters" && toArea.getSelectedItem().toString()=="Square Yards"){
            convertedArea=inputLength/8361;
            JOptionPane.showMessageDialog(this, "The Length in Square Yards is "+convertedArea.toString());
        }
            
            
            //Converting Square Millimeters
            else if(fromArea.getSelectedItem().toString()=="Square Millimeters" && toArea.getSelectedItem().toString()=="Square Meters"){
            convertedArea=inputLength/1000000;
            JOptionPane.showMessageDialog(this, "The Length in Square Meters is "+convertedArea.toString());
        }
            else if(fromArea.getSelectedItem().toString()=="Square Millimeters" && toArea.getSelectedItem().toString()=="Square Centimeters"){
            convertedArea=inputLength/100;
            JOptionPane.showMessageDialog(this, "The Length in Square Centimeters is "+convertedArea.toString());
        }
            else if(fromArea.getSelectedItem().toString()=="Square Millimeters" && toArea.getSelectedItem().toString()=="Square Inches"){
            convertedArea=inputLength/645;
            JOptionPane.showMessageDialog(this, "The Length in Square Inches is "+convertedArea.toString());
        }
            else if(fromArea.getSelectedItem().toString()=="Square Millimeters" && toArea.getSelectedItem().toString()=="Square Feet"){
            convertedArea=inputLength/92903;
            JOptionPane.showMessageDialog(this, "The Length in Square Feet is "+convertedArea.toString());
        }
            else if(fromArea.getSelectedItem().toString()=="Square Millimeters" && toArea.getSelectedItem().toString()=="Square Yards"){
            convertedArea=inputLength/836127;
            JOptionPane.showMessageDialog(this, "The Length in Square Yards is "+convertedArea.toString());
        }
            
            //Converting Square Yards
            else if(fromArea.getSelectedItem().toString()=="Square Yards" && toArea.getSelectedItem().toString()=="Square Meters"){
            convertedArea=inputLength/1.196;
            JOptionPane.showMessageDialog(this, "The Length in Square Meters is "+convertedArea.toString());
        }
            else if(fromArea.getSelectedItem().toString()=="Square Yards" && toArea.getSelectedItem().toString()=="Square Centimeters"){
            convertedArea=inputLength*8361;
            JOptionPane.showMessageDialog(this, "The Length in Square Centimeters is "+convertedArea.toString());
        }
            else if(fromArea.getSelectedItem().toString()=="Square Yards" && toArea.getSelectedItem().toString()=="Square Inches"){
            convertedArea=inputLength*1296;
            JOptionPane.showMessageDialog(this, "The Length in Square Inches is "+convertedArea.toString());
        }
            else if(fromArea.getSelectedItem().toString()=="Square Yards" && toArea.getSelectedItem().toString()=="Square Feet"){
            convertedArea=inputLength*9;
            JOptionPane.showMessageDialog(this, "The Length in Square Feet is "+convertedArea.toString());
        }
            else if(fromArea.getSelectedItem().toString()=="Square Yards" && toArea.getSelectedItem().toString()=="Square Millimeters"){
            convertedArea=inputLength*836127;
            JOptionPane.showMessageDialog(this, "The Length in Square Millimeters is "+convertedArea.toString());
        }
            
            
            else if(fromArea.getSelectedItem().toString()==toArea.getSelectedItem().toString()){
            JOptionPane.showMessageDialog(this, "Same units selected");
        }
    }
    catch(java.lang.NumberFormatException e){JOptionPane.showMessageDialog(this,"Only Numerical Input is Allowed");}
    }//GEN-LAST:event_convertAreaActionPerformed

    private void fromWeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromWeightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fromWeightActionPerformed

    private void convertWeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertWeightActionPerformed
        try{
            //Converting Kilograms
            Double convertedWeight;
            Double inputWeight=Double.parseDouble(weightInput.getText());
            if(fromWeight.getSelectedItem().toString()=="Kilograms" && toWeight.getSelectedItem().toString()=="Grams"){
            convertedWeight=inputWeight*1000;
            JOptionPane.showMessageDialog(this, "The Weight in Grams is "+convertedWeight.toString());
        }
            else if(fromWeight.getSelectedItem().toString()=="Kilograms" && toWeight.getSelectedItem().toString()=="Pounds"){
            convertedWeight=inputWeight*2.205;
            JOptionPane.showMessageDialog(this, "The Weight in Pounds is "+convertedWeight.toString());
        }
            else if(fromWeight.getSelectedItem().toString()=="Kilograms" && toWeight.getSelectedItem().toString()=="Ounces"){
            convertedWeight=inputWeight*35.275;
            JOptionPane.showMessageDialog(this, "The Weight in Ounces is "+convertedWeight.toString());
        }
            
            //Converting Grams
            else if(fromWeight.getSelectedItem().toString()=="Grams" && toWeight.getSelectedItem().toString()=="Kilograms"){
            convertedWeight=inputWeight/1000;
            JOptionPane.showMessageDialog(this, "The Weight in Kilograms is "+convertedWeight.toString());
        }
            else if(fromWeight.getSelectedItem().toString()=="Grams" && toWeight.getSelectedItem().toString()=="Pounds"){
            convertedWeight=inputWeight/454;
            JOptionPane.showMessageDialog(this, "The Weight in Pounds is "+convertedWeight.toString());
        }
            else if(fromWeight.getSelectedItem().toString()=="Grams" && toWeight.getSelectedItem().toString()=="Ounces"){
            convertedWeight=inputWeight/28.35;
            JOptionPane.showMessageDialog(this, "The Weight in Ounces is "+convertedWeight.toString());
        }
            
            //Converting Pounds
            else if(fromWeight.getSelectedItem().toString()=="Pounds" && toWeight.getSelectedItem().toString()=="Kilograms"){
            convertedWeight=inputWeight/2.205;
            JOptionPane.showMessageDialog(this, "The Weight in Kilograms is "+convertedWeight.toString());
        }
            else if(fromWeight.getSelectedItem().toString()=="Pounds" && toWeight.getSelectedItem().toString()=="Grams"){
            convertedWeight=inputWeight*454;
            JOptionPane.showMessageDialog(this, "The Weight in Grams is "+convertedWeight.toString());
        }
            else if(fromWeight.getSelectedItem().toString()=="Pounds" && toWeight.getSelectedItem().toString()=="Ounces"){
            convertedWeight=inputWeight*16;
            JOptionPane.showMessageDialog(this, "The Weight in Ounces is "+convertedWeight.toString());
        }
            
            //Converting Ounces0
            else if(fromWeight.getSelectedItem().toString()=="Ounces" && toWeight.getSelectedItem().toString()=="Kilograms"){
            convertedWeight=inputWeight/35.274;
            JOptionPane.showMessageDialog(this, "The Weight in Kilograms is "+convertedWeight.toString());
        }
            else if(fromWeight.getSelectedItem().toString()=="Ounces" && toWeight.getSelectedItem().toString()=="Grams"){
            convertedWeight=inputWeight*28.35;
            JOptionPane.showMessageDialog(this, "The Weight in Grams is "+convertedWeight.toString());
        }
            else if(fromWeight.getSelectedItem().toString()=="Ounces" && toWeight.getSelectedItem().toString()=="Pounds"){
            convertedWeight=inputWeight/16;
            JOptionPane.showMessageDialog(this, "The Weight in Pounds is "+convertedWeight.toString());
        }
            
            
            else if(fromWeight.getSelectedItem().toString()==toWeight.getSelectedItem().toString()){
            JOptionPane.showMessageDialog(this, "Same units selected");
        }
    }
    catch(java.lang.NumberFormatException e){JOptionPane.showMessageDialog(this,"Only Numerical Input is Allowed");}
    }//GEN-LAST:event_convertWeightActionPerformed

    private void fromSpeedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromSpeedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fromSpeedActionPerformed

    private void convertSpeedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertSpeedActionPerformed
        try{
            //Converting Km/h
            Double convertedSpeed;
            Double inputSpeed=Double.parseDouble(speedInput.getText());
            if(fromSpeed.getSelectedItem().toString()=="Kilometers per Hour" && toSpeed.getSelectedItem().toString()=="Meters per Second"){
            convertedSpeed=inputSpeed/3.6;
            JOptionPane.showMessageDialog(this, "The Speed in Meters per Second is "+convertedSpeed.toString());
        }
            else if(fromSpeed.getSelectedItem().toString()=="Kilometers per Hour" && toSpeed.getSelectedItem().toString()=="Feet per Second"){
            convertedSpeed=inputSpeed/1.097;
            JOptionPane.showMessageDialog(this, "The Speed in Feet per Second is "+convertedSpeed.toString());
        }
            else if(fromSpeed.getSelectedItem().toString()=="Kilometers per Hour" && toSpeed.getSelectedItem().toString()=="Miles per Hour"){
            convertedSpeed=inputSpeed/1.609;
            JOptionPane.showMessageDialog(this, "The Speed in Miles per Hour is "+convertedSpeed.toString());
        }
            else if(fromSpeed.getSelectedItem().toString()=="Kilometers per Hour" && toSpeed.getSelectedItem().toString()=="Knots"){
            convertedSpeed=inputSpeed/1.852;
            JOptionPane.showMessageDialog(this, "The Speed in Knots is "+convertedSpeed.toString());
        }
            
            //Converting m/s
            else if(fromSpeed.getSelectedItem().toString()=="Meters per Second" && toSpeed.getSelectedItem().toString()=="Kilometers per Hour"){
            convertedSpeed=inputSpeed*3.6;
            JOptionPane.showMessageDialog(this, "The Speed in Kilometers per Hour is "+convertedSpeed.toString());
        }
            else if(fromSpeed.getSelectedItem().toString()=="Kilometers per Hour" && toSpeed.getSelectedItem().toString()=="Feet per Second"){
            convertedSpeed=inputSpeed*3.281;
            JOptionPane.showMessageDialog(this, "The Speed in Feet per Second is "+convertedSpeed.toString());
        }
            else if(fromSpeed.getSelectedItem().toString()=="Kilometers per Hour" && toSpeed.getSelectedItem().toString()=="Miles per Hour"){
            convertedSpeed=inputSpeed*2.237;
            JOptionPane.showMessageDialog(this, "The Speed in Miles per Hour is "+convertedSpeed.toString());
        }
            else if(fromSpeed.getSelectedItem().toString()=="Kilometers per Hour" && toSpeed.getSelectedItem().toString()=="Knots"){
            convertedSpeed=inputSpeed*1.944;
            JOptionPane.showMessageDialog(this, "The Speed in Knots is "+convertedSpeed.toString());
        }
            
            //Converting Ft/s
            else if(fromSpeed.getSelectedItem().toString()=="Feet per Second" && toSpeed.getSelectedItem().toString()=="Kilometers per Hour"){
            convertedSpeed=inputSpeed*1.097;
            JOptionPane.showMessageDialog(this, "The Speed in Kilometers per Hour is "+convertedSpeed.toString());
        }
            else if(fromSpeed.getSelectedItem().toString()=="Feet per Second" && toSpeed.getSelectedItem().toString()=="Meters per Second"){
            convertedSpeed=inputSpeed/3.281;
            JOptionPane.showMessageDialog(this, "The Speed in Meters per Second is "+convertedSpeed.toString());
        }
            else if(fromSpeed.getSelectedItem().toString()=="Feet per Second" && toSpeed.getSelectedItem().toString()=="Miles per Hour"){
            convertedSpeed=inputSpeed/1.467;
            JOptionPane.showMessageDialog(this, "The Speed in Miles per Hour is "+convertedSpeed.toString());
        }
            else if(fromSpeed.getSelectedItem().toString()=="Feet per Second" && toSpeed.getSelectedItem().toString()=="Knots"){
            convertedSpeed=inputSpeed/1.688;
            JOptionPane.showMessageDialog(this, "The Speed in Knots is "+convertedSpeed.toString());
        }
            
            //Converting Miles/hr
            
            else if(fromSpeed.getSelectedItem().toString()=="Miles per Hour" && toSpeed.getSelectedItem().toString()=="Kilometers per Hour"){
            convertedSpeed=inputSpeed*1.609;
            JOptionPane.showMessageDialog(this, "The Speed in Kilometers per Hour is "+convertedSpeed.toString());
        }
            else if(fromSpeed.getSelectedItem().toString()=="Miles per Hour" && toSpeed.getSelectedItem().toString()=="Meters per Second"){
            convertedSpeed=inputSpeed/2.237;
            JOptionPane.showMessageDialog(this, "The Speed in Meters per Second is "+convertedSpeed.toString());
        }
            else if(fromSpeed.getSelectedItem().toString()=="Miles per Hour" && toSpeed.getSelectedItem().toString()=="Feet per Second"){
            convertedSpeed=inputSpeed*1.467;
            JOptionPane.showMessageDialog(this, "The Speed in Feet per Second is "+convertedSpeed.toString());
        }
            else if(fromSpeed.getSelectedItem().toString()=="Miles per Hour" && toSpeed.getSelectedItem().toString()=="Knots"){
            convertedSpeed=inputSpeed/1.151;
            JOptionPane.showMessageDialog(this, "The Speed in Knots is "+convertedSpeed.toString());
        }
            
            //Converting Knots
            else if(fromSpeed.getSelectedItem().toString()=="Knots" && toSpeed.getSelectedItem().toString()=="Kilometers per Hour"){
            convertedSpeed=inputSpeed*1.852;
            JOptionPane.showMessageDialog(this, "The Speed in Kilometers per Hour is "+convertedSpeed.toString());
        }
            else if(fromSpeed.getSelectedItem().toString()=="Knots" && toSpeed.getSelectedItem().toString()=="Meters per Second"){
            convertedSpeed=inputSpeed/1.944;
            JOptionPane.showMessageDialog(this, "The Speed in Meters per Second is "+convertedSpeed.toString());
        }
            else if(fromSpeed.getSelectedItem().toString()=="Knots" && toSpeed.getSelectedItem().toString()=="Feet per Second"){
            convertedSpeed=inputSpeed*1.688;
            JOptionPane.showMessageDialog(this, "The Speed in Miles per Hour is "+convertedSpeed.toString());
        }
            else if(fromSpeed.getSelectedItem().toString()=="Knots" && toSpeed.getSelectedItem().toString()=="Miles per Hour"){
            convertedSpeed=inputSpeed*1.151;
            JOptionPane.showMessageDialog(this, "The Speed in Miles per Hour is "+convertedSpeed.toString());
        }
            
            
            
            else if(fromSpeed.getSelectedItem().toString()==toSpeed.getSelectedItem().toString()){
            JOptionPane.showMessageDialog(this, "Same units selected");
        }
    }
    catch(java.lang.NumberFormatException e){JOptionPane.showMessageDialog(this,"Only Numerical Input is Allowed");}
    }//GEN-LAST:event_convertSpeedActionPerformed

    private void fromVolumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromVolumeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fromVolumeActionPerformed

    private void convertVolumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertVolumeActionPerformed
        try{
            //Converting Litres
            Double convertedVolume;
            Double inputVolume=Double.parseDouble(volumeInput.getText());
            if(fromVolume.getSelectedItem().toString()=="Litres" && toVolume.getSelectedItem().toString()=="Gallons"){
            convertedVolume=inputVolume/4.546;
            JOptionPane.showMessageDialog(this, "The Volume in Gallons is "+convertedVolume.toString());
        }
            else if(fromVolume.getSelectedItem().toString()=="Litres" && toVolume.getSelectedItem().toString()=="Cubic Meters"){
            convertedVolume=inputVolume/1000;
            JOptionPane.showMessageDialog(this, "The Volume in Cubic Meters is "+convertedVolume.toString());
        }
            else if(fromVolume.getSelectedItem().toString()=="Litres" && toVolume.getSelectedItem().toString()=="Cubic Feet"){
            convertedVolume=inputVolume/28.317;
            JOptionPane.showMessageDialog(this, "The Volume in Cubic Feet is "+convertedVolume.toString());
        }
            
            //Converting Gallons
            else if(fromVolume.getSelectedItem().toString()=="Gallons" && toVolume.getSelectedItem().toString()=="Litres"){
            convertedVolume=inputVolume*4.546;
            JOptionPane.showMessageDialog(this, "The Volume in Litres is "+convertedVolume.toString());
        }
            else if(fromVolume.getSelectedItem().toString()=="Gallons" && toVolume.getSelectedItem().toString()=="Cubic Meters"){
            convertedVolume=inputVolume/220;
            JOptionPane.showMessageDialog(this, "The Volume in Cubic Meters is "+convertedVolume.toString());
        }
            else if(fromVolume.getSelectedItem().toString()=="Gallons" && toVolume.getSelectedItem().toString()=="Cubic Feet"){
            convertedVolume=inputVolume/6.229;
            JOptionPane.showMessageDialog(this, "The Volume in Cubic Feet is "+convertedVolume.toString());
        }
            
            //Converting Cubic Meters
            else if(fromVolume.getSelectedItem().toString()=="Cubic Meters" && toVolume.getSelectedItem().toString()=="Litres"){
            convertedVolume=inputVolume*1000;
            JOptionPane.showMessageDialog(this, "The Volume in Litres is "+convertedVolume.toString());
        }
            else if(fromVolume.getSelectedItem().toString()=="Cubic Meters" && toVolume.getSelectedItem().toString()=="Gallons"){
            convertedVolume=inputVolume*220;
            JOptionPane.showMessageDialog(this, "The Volume in Gallons is "+convertedVolume.toString());
        }
            else if(fromVolume.getSelectedItem().toString()=="Cubic Meters" && toVolume.getSelectedItem().toString()=="Cubic Feet"){
            convertedVolume=inputVolume*35.315;
            JOptionPane.showMessageDialog(this, "The Volume in Cubic Feet is "+convertedVolume.toString());
        }
            
            //Converting Cubic Feet
            else if(fromVolume.getSelectedItem().toString()=="Cubic Feet" && toVolume.getSelectedItem().toString()=="Litres"){
            convertedVolume=inputVolume*28.317;
            JOptionPane.showMessageDialog(this, "The Volume in Litres is "+convertedVolume.toString());
        }
            else if(fromVolume.getSelectedItem().toString()=="Cubic Feet" && toVolume.getSelectedItem().toString()=="Gallons"){
            convertedVolume=inputVolume*6.229;
            JOptionPane.showMessageDialog(this, "The Volume in Gallons is "+convertedVolume.toString());
        }
            else if(fromVolume.getSelectedItem().toString()=="Cubic Feet" && toVolume.getSelectedItem().toString()=="Cubic Meters"){
            convertedVolume=inputVolume/35.315;
            JOptionPane.showMessageDialog(this, "The Volume in Cubic Meters is "+convertedVolume.toString());
        }
            
            
            else if(fromVolume.getSelectedItem().toString()==toVolume.getSelectedItem().toString()){
            JOptionPane.showMessageDialog(this, "Same units selected");
        }
    }
    catch(java.lang.NumberFormatException e){JOptionPane.showMessageDialog(this,"Only Numerical Input is Allowed");}
    }//GEN-LAST:event_convertVolumeActionPerformed

    private void fromTempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromTempActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fromTempActionPerformed

    private void convertTempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertTempActionPerformed
      // TODO add your handling code here:
      
    Double ConvertedTemp;
    Double tempAmount = Double.parseDouble(tempInput.getText());
    
    //fahrenheit conversion
    if(fromTemp.getSelectedItem().toString() == "Fahrenheit" && toTemp.getSelectedItem().toString() == "Celsius"){
     ConvertedTemp = (tempAmount - 32 ) *5/9;
     JOptionPane.showMessageDialog(this,"temperature in celsius is "+ ConvertedTemp.toString());
    }
    if(fromTemp.getSelectedItem().toString() == "Fahrenheit" && toTemp.getSelectedItem().toString() == "Kelvin"){
     ConvertedTemp = (tempAmount - 32 ) *5/9 +273;
     JOptionPane.showMessageDialog(this,"temperature in kelvin is "+ ConvertedTemp.toString());
    }
     
    //Celsius conversion
    if(fromTemp.getSelectedItem().toString() == "Celsius" && toTemp.getSelectedItem().toString() == "Fahrenheit"){
     ConvertedTemp = (tempAmount * 9/5) + 32;
     JOptionPane.showMessageDialog(this,"temperature in Fahrenheit is "+ ConvertedTemp.toString());
    }
    if(fromTemp.getSelectedItem().toString() == "Celsius" && toTemp.getSelectedItem().toString() == "Kelvin"){
     ConvertedTemp = tempAmount + 273.15;
     JOptionPane.showMessageDialog(this,"temperature in kelvin is "+ ConvertedTemp.toString());
    }
    
    //Kelvin Conversion
    if(fromTemp.getSelectedItem().toString() == "Kelvin" && toTemp.getSelectedItem().toString() == "Fahrenheit"){
     ConvertedTemp = (tempAmount - 273.15) * 9/5 + 32;
     JOptionPane.showMessageDialog(this,"temperature in Fahrenheit is "+ ConvertedTemp.toString());
    }
    if(fromTemp.getSelectedItem().toString() == "Kelvin" && toTemp.getSelectedItem().toString() == "Celsius"){
     ConvertedTemp = tempAmount - 273.15 ;
     JOptionPane.showMessageDialog(this,"temperature in celsius is "+ ConvertedTemp.toString());
    }
    
    }//GEN-LAST:event_convertTempActionPerformed
    
    private void fromForceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromForceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fromForceActionPerformed

    private void convertForceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertForceActionPerformed
//        dyne Newton Kilogram-Force
    Double ConvertedForce;
    Double forceAmount = Double.parseDouble(forceInput.getText());
    
    //dyne conversion
    if(fromForce.getSelectedItem().toString() == "dyne" && toForce.getSelectedItem().toString() == "Newton"){
     ConvertedForce = forceAmount / 100000 ;
     JOptionPane.showMessageDialog(this,"Force in newton is "+ ConvertedForce.toString());
    }
     
    //Newton conversion
    if(fromForce.getSelectedItem().toString() == "Newton" && toForce.getSelectedItem().toString() == "dyne"){
     ConvertedForce = forceAmount * 100000 ;
     JOptionPane.showMessageDialog(this,"Force in dyne is "+ ConvertedForce.toString());
    }    


    }//GEN-LAST:event_convertForceActionPerformed

    private void fromStorageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromStorageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fromStorageActionPerformed

    private void convertStorageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertStorageActionPerformed
       
    Double ConvertedStorage;
    Double StorageAmount = Double.parseDouble(storageInput.getText());
    
    //Bit conversion
    if(fromStorage.getSelectedItem().toString() == "Bit" && toStorage.getSelectedItem().toString() == "Byte"){
     ConvertedStorage = StorageAmount / 8 ;
     JOptionPane.showMessageDialog(this,"Storage in Byte is "+ ConvertedStorage.toString());
    }
     
    //Byte conversion
    if(fromStorage.getSelectedItem().toString() == "Byte" && toStorage.getSelectedItem().toString() == "Bit"){
     ConvertedStorage = StorageAmount * 8 ;
     JOptionPane.showMessageDialog(this,"Storage in Bit is "+ ConvertedStorage.toString());
    }   
    }//GEN-LAST:event_convertStorageActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        lengthPanel.setVisible(false);
        areaPanel.setVisible(false);
        volumePanel.setVisible(false);
        weightPanel.setVisible(false);
        speedPanel.setVisible(false);
        forcePanel.setVisible(false);
        temperaturePanel.setVisible(false);
        densityPanel.setVisible(true);
        energyPanel.setVisible(false);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void fromPressureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromPressureActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fromPressureActionPerformed

    private void convertPressureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertPressureActionPerformed
        // TODO add your handling code here:
    Double ConvertedPressure;
    Double pressureAmount = Double.parseDouble(pressureInput.getText());
    
    //Bar conversion
    if(fromPressure.getSelectedItem().toString() == "Bar" && toPressure.getSelectedItem().toString() == "Pascal"){
     ConvertedPressure = pressureAmount * 100000;
     JOptionPane.showMessageDialog(this,"Pressure in Pascal is "+ ConvertedPressure.toString());
    }
    if(fromPressure.getSelectedItem().toString() == "Bar" && toPressure.getSelectedItem().toString() == "Torr"){
     ConvertedPressure = pressureAmount * 750;
     JOptionPane.showMessageDialog(this,"Pressure in Torr is "+ ConvertedPressure.toString());
    }   
    
    //Pascal conversion
    if(fromPressure.getSelectedItem().toString() == "Pascal" && toPressure.getSelectedItem().toString() == "Bar"){
     ConvertedPressure = pressureAmount/ 100000;
     JOptionPane.showMessageDialog(this,"Pressure in Bar is "+ ConvertedPressure.toString());
    }
    if(fromPressure.getSelectedItem().toString() == "Pascal" && toPressure.getSelectedItem().toString() == "Torr"){
     ConvertedPressure = pressureAmount / 133 ;
     JOptionPane.showMessageDialog(this,"Pressure in torr is "+ ConvertedPressure.toString());
    }
    
    //Torr conversion
    if(fromPressure.getSelectedItem().toString() == "Torr" && toPressure.getSelectedItem().toString() == "Bar"){
     ConvertedPressure = pressureAmount/ 750 ;
     JOptionPane.showMessageDialog(this,"Pressure in Bar is "+ ConvertedPressure.toString());
    }
    if(fromPressure.getSelectedItem().toString() == "Torr" && toPressure.getSelectedItem().toString() == "Pascal"){
     ConvertedPressure = pressureAmount * 133 ;
     JOptionPane.showMessageDialog(this,"Pressure in pascal is "+ ConvertedPressure.toString());
    }
    
    
    }//GEN-LAST:event_convertPressureActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel appTitle;
    private javax.swing.JTextField areaInput;
    private javax.swing.JPanel areaPanel;
    private javax.swing.JButton convertArea;
    private javax.swing.JButton convertForce;
    private javax.swing.JButton convertLength;
    private javax.swing.JButton convertPressure;
    private javax.swing.JButton convertSpeed;
    private javax.swing.JButton convertStorage;
    private javax.swing.JButton convertTemp;
    private javax.swing.JButton convertVolume;
    private javax.swing.JButton convertWeight;
    private javax.swing.JPanel densityPanel;
    private javax.swing.JPanel energyPanel;
    private javax.swing.JTextField forceInput;
    private javax.swing.JPanel forcePanel;
    private javax.swing.JComboBox<String> fromArea;
    private javax.swing.JComboBox<String> fromForce;
    private javax.swing.JComboBox<String> fromLength;
    private javax.swing.JComboBox<String> fromPressure;
    private javax.swing.JComboBox<String> fromSpeed;
    private javax.swing.JComboBox<String> fromStorage;
    private javax.swing.JComboBox<String> fromTemp;
    private javax.swing.JComboBox<String> fromVolume;
    private javax.swing.JComboBox<String> fromWeight;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField lengthInput;
    private javax.swing.JPanel lengthPanel;
    private javax.swing.JTextField pressureInput;
    private javax.swing.JTextField speedInput;
    private javax.swing.JPanel speedPanel;
    private javax.swing.JTextField storageInput;
    private javax.swing.JTextField tempInput;
    private javax.swing.JPanel temperaturePanel;
    private javax.swing.JComboBox<String> toArea;
    private javax.swing.JComboBox<String> toForce;
    private javax.swing.JComboBox<String> toLength;
    private javax.swing.JComboBox<String> toPressure;
    private javax.swing.JComboBox<String> toSpeed;
    private javax.swing.JComboBox<String> toStorage;
    private javax.swing.JComboBox<String> toTemp;
    private javax.swing.JComboBox<String> toVolume;
    private javax.swing.JComboBox<String> toWeight;
    private javax.swing.JTextField volumeInput;
    private javax.swing.JPanel volumePanel;
    private javax.swing.JTextField weightInput;
    private javax.swing.JPanel weightPanel;
    // End of variables declaration//GEN-END:variables
}
